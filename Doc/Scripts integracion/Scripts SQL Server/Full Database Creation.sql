IF OBJECT_ID('SP_BORRAR_INTEGRACION', 'P') IS NOT NULL
	DROP PROCEDURE SP_BORRAR_INTEGRACION

IF OBJECT_ID('STRANSITO', 'U') IS NOT NULL
	DROP TABLE STRANSITO

IF OBJECT_ID('REXISTENCIAS', 'U') IS NOT NULL
	DROP TABLE REXISTENCIAS

IF OBJECT_ID('RITEMSXCOLOR', 'U') IS NOT NULL
	DROP TABLE RITEMSXCOLOR

IF OBJECT_ID('RITEMS', 'U') IS NOT NULL
	DROP TABLE RITEMS

IF OBJECT_ID('RLINEAS', 'U') IS NOT NULL
	DROP TABLE RLINEAS
	
IF OBJECT_ID('RUNIDADESMEDIDA', 'U') IS NOT NULL
	DROP TABLE RUNIDADESMEDIDA
	
IF OBJECT_ID('RMONEDAS', 'U') IS NOT NULL
	DROP TABLE RMONEDAS
	
IF OBJECT_ID('REMBALAJES', 'U') IS NOT NULL
	DROP TABLE REMBALAJES
GO

CREATE TABLE runidadesmedida
(
  ID INTEGER NOT NULL IDENTITY(1,1),
  IDUNIDAD SMALLINT NOT NULL,
  NOMUNIDAD VARCHAR(30),
  ACCION CHAR(1) NOT NULL,
  INTENTOS INTEGER DEFAULT 0 NOT NULL,
  ERROR VARCHAR(MAX),
  FECHA_INTEGRA DATETIME DEFAULT GETDATE()   NOT NULL,
  CONSTRAINT PK_RUNIDADESMEDIDA PRIMARY KEY (ID)
)
GO

CREATE TABLE rmonedas
(
  ID INTEGER NOT NULL IDENTITY(1,1),
  IDMONEDA SMALLINT NOT NULL,
  NOMMONEDA VARCHAR(30),
  ACCION CHAR(1) NOT NULL,
  INTENTOS INTEGER DEFAULT 0 NOT NULL,
  ERROR VARCHAR(MAX),
  FECHA_INTEGRA DATETIME DEFAULT GETDATE()   NOT NULL,
  CONSTRAINT PK_RMONEDAS PRIMARY KEY (ID)
)
GO

CREATE TABLE rembalajes
(
  ID INTEGER NOT NULL IDENTITY(1,1),
  IDEMBALAJE SMALLINT NOT NULL,
  IDITEM SMALLINT,
  PESO FLOAT,
  ALTURA FLOAT,
  ANCHO FLOAT,
  LARGO FLOAT,
  CANTIDAD VARCHAR(10),
  ACCION CHAR(1),
  INTENTOS INTEGER DEFAULT 0 NOT NULL,
  ERROR VARCHAR(MAX),
  FECHA_INTEGRA DATETIME DEFAULT GETDATE()   NOT NULL,
  CONSTRAINT PK_REMBALAJES PRIMARY KEY (ID)
)
GO

CREATE TABLE rlineas
(
  ID INTEGER NOT NULL IDENTITY(1,1),
  IDLINEA SMALLINT NOT NULL,
  CODLINEA VARCHAR(10),
  NOMLINEA VARCHAR(30),
  DEMONIO CHAR(1),
  ACTIVO CHAR(1),
  ACCION CHAR(1) NOT NULL,
  INTENTOS INTEGER DEFAULT 0 NOT NULL,
  ERROR VARCHAR(MAX),
  FECHA_INTEGRA DATETIME DEFAULT GETDATE()   NOT NULL,
  CONSTRAINT PK_RLINEAS PRIMARY KEY (ID)
)
GO

CREATE TABLE ritems
(
  ID INTEGER NOT NULL IDENTITY(1,1),
  IDITEM INT NOT NULL,
  IDLINEA SMALLINT,
  REFINTERNA VARCHAR(10),
  NOMITEM VARCHAR(50),
  REFPROVEEDOR VARCHAR(27),
  NOMITEMPROV VARCHAR(50),
  TIPOITEM CHAR(1) NOT NULL DEFAULT 'C',
  COSTOFOB FLOAT,
  IDMONEDA SMALLINT,
  TIPPARTE CHAR(1) NOT NULL DEFAULT 'O',
  DETERMINANTE CHAR(1) NOT NULL DEFAULT 'N',
  OBSERVACIONES VARCHAR(250),
  INVENTARIOEXT CHAR(1),
  COSTOCIF VARCHAR(200),
  VOLUMEN FLOAT,
  PESO FLOAT,
  IDUNIDADFOB SMALLINT,
  IDUNIDADCIF SMALLINT,
  PRODNAC CHAR(1),
  ACTIVO CHAR(1),
  CATALOGOVISIBLE CHAR(1),
  ACCION CHAR(1) NOT NULL,
  INTENTOS INTEGER DEFAULT 0 NOT NULL,
  ERROR VARCHAR(MAX),
  FECHA_INTEGRA DATETIME DEFAULT GETDATE()   NOT NULL,
  CONSTRAINT PK_RITEMS PRIMARY KEY (ID)
)
GO

CREATE TABLE ritemsxcolor
(
  ID INTEGER NOT NULL IDENTITY(1,1),
  IDITEMXCOLOR INT NOT NULL,
  IDITEM INT,
  REFITEMXCOLOR VARCHAR(30),
  REFINTITEMXCOLOR VARCHAR(10),
  NOMCOLOR VARCHAR(30),
  NOMITEMXCOLORPROV VARCHAR(30),
  OBSERVACIONES VARCHAR(250),
  COLOR VARCHAR(30),
  CANTPEDIDA INTEGER,
  CANTIDAD INTEGER,
  CANTRESERVADA INTEGER,
  CANTPEDIDAPAN INTEGER NOT NULL DEFAULT 0,
  CANTRESERVADAPAN INTEGER NOT NULL DEFAULT 0,
  CANTIDADPAN INTEGER NOT NULL DEFAULT 0,
  ACTIVO CHAR(1),
  AGOTADO CHAR(1),
  CANTPROCESO INTEGER,
  ACCION CHAR(1) NOT NULL,
  INTENTOS INTEGER DEFAULT 0 NOT NULL,
  ERROR VARCHAR(MAX),
  FECHA_INTEGRA DATETIME DEFAULT GETDATE()   NOT NULL,
  CONSTRAINT PK_RITEMSXCOLOR PRIMARY KEY (ID)
)
GO

CREATE TABLE rexistencias
(
  ID INTEGER NOT NULL IDENTITY(1,1),
  IDITEMXCOLOR INT NOT NULL,
  IDITEM INT,
  IDBODEGA SMALLINT NOT NULL,
  COLOR VARCHAR(30),
  CANTIDAD INTEGER ,
  BODEGA VARCHAR(30) ,
  ACCION CHAR(1) NOT NULL,
  INTENTOS INTEGER DEFAULT 0 NOT NULL,
  ERROR VARCHAR(MAX),
  FECHA_INTEGRA DATETIME DEFAULT GETDATE()   NOT NULL,
  CONSTRAINT PK_REXISTENCIAS PRIMARY KEY (ID)
)
GO

CREATE TABLE stransito
(
  ID INTEGER NOT NULL IDENTITY(1,1),
  IDITEMTRANSITO INT NOT NULL,
  FECHAESTRECIBO DATETIME,
  CANTIDADREC INTEGER,
  FECHA DATETIME,
  ACTIVIDAD VARCHAR(200),
  IDITEMXCOLOR INT,
  ACCION CHAR(1) NOT NULL,
  INTENTOS INTEGER DEFAULT 0 NOT NULL,
  ERROR VARCHAR(MAX),
  FECHA_INTEGRA DATETIME DEFAULT GETDATE()   NOT NULL,
  CONSTRAINT PK_STRANSITO PRIMARY KEY (ID)
)
GO

IF NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS AS C1 WHERE C1.COLUMN_NAME = 'IS_CATALOG_VISIBLE' AND C1.TABLE_NAME = 'WAREHOUSES')
	ALTER TABLE WAREHOUSES ADD IS_CATALOG_VISIBLE BIT NOT NULL DEFAULT 0 
GO

UPDATE WAREHOUSES
   SET IS_CATALOG_VISIBLE = 1 
 WHERE UPPER(WAREHOUSE_NAME) IN ('BODEGA LOCAL','ZONA FRANCA')
GO

CREATE PROCEDURE SP_BORRAR_INTEGRACION
	@DAYS_NUMBER INT
AS
BEGIN
	DECLARE @DATE DATETIME = DATEADD(DAY, -@DAYS_NUMBER, GETDATE());

	DELETE FROM RITEMS WHERE FECHA_INTEGRA<= @DATE;
    DELETE FROM RITEMSXCOLOR WHERE FECHA_INTEGRA<= @DATE;
    DELETE FROM RLINEAS WHERE FECHA_INTEGRA<= @DATE;
    DELETE FROM RMONEDAS WHERE FECHA_INTEGRA<= @DATE;
    DELETE FROM REMBALAJES WHERE FECHA_INTEGRA<= @DATE;
    DELETE FROM REXISTENCIAS WHERE FECHA_INTEGRA<= @DATE;
    DELETE FROM STRANSITO WHERE FECHA_INTEGRA<= @DATE;
    DELETE FROM RUNIDADESMEDIDA WHERE FECHA_INTEGRA<= @DATE; 
END
GO

CREATE OR ALTER TRIGGER [DBO].[TRGINSERTREMBALAJES]
   ON  PACKAGING 
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN
	SET NOCOUNT ON;

	/* Se esta realizando la eliminacion del registro */
	IF EXISTS(SELECT 1 FROM DELETED) AND NOT EXISTS(SELECT 1 FROM INSERTED)
	BEGIN 
		INSERT INTO REMBALAJES (IDEMBALAJE, ACCION)
			 SELECT PACKAGING_ID, 'D' 
			   FROM DELETED			
	END 
	ELSE
		IF EXISTS(SELECT 1 FROM INSERTED)
		BEGIN 
			INSERT INTO REMBALAJES (IDEMBALAJE, IDITEM, PESO, ALTURA, ANCHO, LARGO, CANTIDAD, ACCION)
				 SELECT PACKAGING_ID, ITEM_ID, WEIGHT, HEIGHT, WIDTH, LENGTH, QUANTITY, 'I'
				   FROM INSERTED
		END 
END
GO

CREATE OR ALTER TRIGGER [DBO].[TRGINSERTRMONEDAS]
   ON  CURRENCIES
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN
	SET NOCOUNT ON;

	/* Se esta realizando la eliminacion del registro */
	IF EXISTS(SELECT 1 FROM DELETED) AND NOT EXISTS(SELECT 1 FROM INSERTED)
	BEGIN 
		INSERT INTO RMONEDAS (IDMONEDA, ACCION)
			 SELECT CURRENCY_ID, 'D' 
			   FROM DELETED			
	END 
	ELSE
		IF EXISTS(SELECT 1 FROM INSERTED)
		BEGIN 
			INSERT INTO RMONEDAS (IDMONEDA, NOMMONEDA, ACCION)
				 SELECT CURRENCY_ID, CURRENCY_NAME, 'I'
				   FROM INSERTED
		END 
END
GO

CREATE OR ALTER TRIGGER [DBO].[TRGINSERTRUNIDADESMEDIDA]
   ON  MEASURE_UNITS
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN
	SET NOCOUNT ON;

	/* Se esta realizando la eliminacion del registro */
	IF EXISTS(SELECT 1 FROM DELETED) AND NOT EXISTS(SELECT 1 FROM INSERTED)
	BEGIN 
		INSERT INTO RUNIDADESMEDIDA(IDUNIDAD, ACCION)
			 SELECT MEASURE_UNIT_ID, 'D' 
			   FROM DELETED			
	END 
	ELSE
		IF EXISTS(SELECT 1 FROM INSERTED)
		BEGIN 
			INSERT INTO RUNIDADESMEDIDA (IDUNIDAD, NOMUNIDAD, ACCION)
				 SELECT MEASURE_UNIT_ID, MEASURE_UNIT_NAME, 'I'
				   FROM INSERTED
		END 
END
GO

CREATE OR ALTER TRIGGER [DBO].[TRGINSERTRLINEAS]
   ON  LINES
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @oldActivo bit = (SELECT IS_ACTIVE FROM DELETED)
	DECLARE @newActivo bit = (SELECT IS_ACTIVE FROM INSERTED)
			
	/* Se esta realizando la eliminacion del registro o se esta inactivando la linea */
	IF (@oldActivo IS NOT NULL AND ISNULL(@newActivo,0) = 0)
	BEGIN 
		INSERT INTO RLINEAS(IDLINEA, ACCION)
			 SELECT LINE_ID, 'D' 
			   FROM DELETED		
		
		/* Si se inactiva la linea, se deben inactivar todos sus descendientes en el catalogo */
		IF (@newActivo = 0)
		BEGIN
			INSERT INTO RITEMS (IDITEM, Accion)
				 SELECT ITEM_ID, 'D'
                   FROM ITEMS a                
				   JOIN INSERTED b ON b.LINE_ID = a.LINE_ID   
				  WHERE a.IS_CATALOG_VISIBLE = 1 
				    AND a.IS_ACTIVE = 1
                    
			/* insertar todas las referencias de la linea */
			INSERT INTO RITEMSXCOLOR (IDITEMXCOLOR, Accion)
                 SELECT a.REFERENCE_ID, 'D'
                   FROM ITEM_REFERENCES a                                   
				  WHERE EXISTS (SELECT 1 
				                  FROM ITEMS b 
								  JOIN INSERTED c ON c.LINE_ID = b.LINE_ID
				                 WHERE b.ITEM_ID = a.ITEM_ID
								   AND b.IS_CATALOG_VISIBLE = 1
								   AND b.IS_ACTIVE = 1)
                
			/* eliminar todas las existencias en bodega de la linea */
			INSERT INTO REXISTENCIAS (IdItemxColor, IdBodega, Accion)
                 SELECT a.REFERENCE_ID, a.WAREHOUSE_ID, 'D' 
                   FROM REFERENCES_WAREHOUSE a
				  WHERE EXISTS (SELECT 1 FROM ITEM_REFERENCES b 
								  JOIN ITEMS c ON c.ITEM_ID = b.ITEM_ID
											  AND c.IS_CATALOG_VISIBLE = 1
											  AND c.IS_ACTIVE = 1
								  JOIN INSERTED e ON e.LINE_ID = c.LINE_ID 
				                 WHERE b.REFERENCE_ID = a.REFERENCE_ID)
				    AND EXISTS (SELECT 1 FROM WAREHOUSES d 
								 WHERE d.WAREHOUSE_ID = a.WAREHOUSE_ID
								   AND d.IS_CATALOG_VISIBLE = 1)

			/* eliminar todas las ordenes en transito de la linea */
			INSERT INTO STRANSITO (IDITEMTRANSITO, Accion)
                 SELECT PURCHASE_ORDER_DETAIL_ID, 'D'
                   FROM PURCHASE_ORDER_DETAILS a
                   JOIN PURCHASE_ORDERS b ON b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID                  
				   JOIN STATUS_DOCUMENT_TYPES g ON g.STATUS_DOCUMENT_TYPE_ID = b.STATUS_DOCUMENT_TYPE_ID
                  WHERE g.STATUS_ORDER = 1 
				    AND EXISTS (SELECT 1 
								  FROM ITEM_REFERENCES c 
								  JOIN ITEMS d ON d.ITEM_ID = c.ITEM_ID
											  AND d.IS_CATALOG_VISIBLE = 1
											  AND d.IS_ACTIVE = 1
								  JOIN INSERTED f ON f.LINE_ID = d.LINE_ID				   
								 WHERE c.REFERENCE_ID = a.REFERENCE_ID)
                    AND EXISTS (SELECT 1 
						          FROM WAREHOUSES h 
								 WHERE h.WAREHOUSE_ID = a.WAREHOUSE_ID  
								   AND h.IS_CATALOG_VISIBLE = 1)                        
		END
	END 
	ELSE		
		/* la linea esta activa o se esta activando */
		IF (@OldActivo = 0 AND @newActivo = 1)
		BEGIN
			/* siempre se actualiza la linea cuando esta activa */
			INSERT INTO RLINEAS(IDLINEA, CODLINEA, NOMLINEA, 
						DEMONIO, 
						ACTIVO, 
						ACCION)
				 SELECT LINE_ID, LINE_CODE, LINE_NAME, 
						CASE WHEN IS_DEMON = 0 THEN 'N' WHEN IS_DEMON = 1 THEN 'S' ELSE NULL END, /* se transforman ya que en la base de integracion los tipos de dato son diferentes */
						CASE WHEN IS_ACTIVE = 0 THEN 'N' WHEN IS_ACTIVE = 1 THEN 'S' ELSE NULL END, /* se transforman ya que en la base de integracion los tipos de dato son diferentes */ 
						'I' 
				   FROM INSERTED
			
			/* solo si se esta activando se envia la creacion de todos los hijos de la linea */
			/* insertar todos los items de la linea */
			INSERT INTO RITEMS (IDITEM, IDLINEA, REFINTERNA, NOMITEM, REFPROVEEDOR, NOMITEMPROV, COSTOFOB, IDMONEDA, OBSERVACIONES, INVENTARIOEXT, COSTOCIF, VOLUMEN, 
								PESO, IDUNIDADFOB, IDUNIDADCIF, PRODNAC, ACTIVO, CATALOGOVISIBLE, Accion)
				 SELECT ITEM_ID, a.LINE_ID, INTERNAL_REFERENCE, ITEM_NAME, PROVIDER_REFERENCE, PROVIDER_ITEM_NAME,
                        FOB_COST, CURRENCY_ID, NOTES,
					    CASE WHEN IS_EXTERNAL_INVENTORY = 0 THEN 'N' WHEN IS_EXTERNAL_INVENTORY = 1 THEN 'S' ELSE NULL END, /* se transforman ya que en la base de integracion los tipos de dato son diferentes */ 
					    CIF_COST, VOLUME, WEIGHT, FOB_MEASURE_UNIT_ID, CIF_MEASURE_UNIT_ID, 
                        CASE WHEN IS_DOMESTIC_PRODUCT = 0 THEN 'N' WHEN IS_DOMESTIC_PRODUCT = 1 THEN 'S' ELSE NULL END, /* se transforman ya que en la base de integracion los tipos de dato son diferentes */ 
					    CASE WHEN a.IS_ACTIVE = 0 THEN 'N' WHEN a.IS_ACTIVE = 1 THEN 'S' ELSE NULL END, /* se transforman ya que en la base de integracion los tipos de dato son diferentes */ 
					    CASE WHEN a.IS_CATALOG_VISIBLE = 0 THEN 'N' WHEN a.IS_CATALOG_VISIBLE = 1 THEN 'S' ELSE NULL END, /* se transforman ya que en la base de integracion los tipos de dato son diferentes */ 
				  	    'I'
                   FROM ITEMS a                
				   JOIN INSERTED b ON b.LINE_ID = a.LINE_ID
                  WHERE a.IS_ACTIVE = 1
                    AND a.IS_CATALOG_VISIBLE = 1  
				
			/* insertar todas las referencias de la linea */
			INSERT INTO RITEMSXCOLOR (IDITEMXCOLOR, IDITEM, REFITEMXCOLOR, REFINTITEMXCOLOR, NOMCOLOR, NOMITEMXCOLORPROV, OBSERVACIONES,
                                      COLOR, CANTPEDIDA, CANTIDAD, CANTRESERVADA, CANTPEDIDAPAN, CANTRESERVADAPAN, CANTIDADPAN, ACTIVO,
                                      AGOTADO, CANTPROCESO, Accion)
                 SELECT a.REFERENCE_ID, a.ITEM_ID, a.REFERENCE_CODE, a.PROVIDER_REFERENCE_CODE, a.REFERENCE_NAME, a.PROVIDER_REFERENCE_NAME, a.NOTES,
                        a.REFERENCE_NAME, a.ORDERED_QUANTITY, a.INVENTORY_QUANTITY, a.RESERVED_QUANTITY, 0, 0, 0, a.IS_ACTIVE,
                        a.IS_SOLD_OUT, a.WORK_IN_PROCESS_QUANTITY, 'I'
				   FROM ITEM_REFERENCES a 
				  WHERE a.IS_ACTIVE = 1
				    AND EXISTS (SELECT 1 FROM ITEMS b 
								  JOIN INSERTED c ON c.LINE_ID = b.LINE_ID
								 WHERE b.ITEM_ID = a.ITEM_ID
								   AND b.IS_ACTIVE = 1
								   AND b.IS_CATALOG_VISIBLE = 1)                    
					
			/* insertar todas las existencias en bodega de la linea */
			INSERT INTO REXISTENCIAS (IdItemxColor, IdItem, IdBodega, Cantidad, Color, bodega, Accion)
                 SELECT a.REFERENCE_ID, b.ITEM_ID, a.WAREHOUSE_ID, a.QUANTITY, b.REFERENCE_NAME, d.WAREHOUSE_NAME, 'I' 
                   FROM REFERENCES_WAREHOUSE a
                   JOIN ITEM_REFERENCES b ON b.REFERENCE_ID = a.REFERENCE_ID
										 AND b.IS_ACTIVE = 1
                   JOIN WAREHOUSES d ON d.WAREHOUSE_ID = a.WAREHOUSE_ID				   
									AND d.IS_CATALOG_VISIBLE = 1 
                  WHERE EXISTS (SELECT 1 FROM ITEMS c 
								  JOIN INSERTED e ON e.LINE_ID = c.LINE_ID
								 WHERE c.ITEM_ID = b.ITEM_ID                   
								   AND c.IS_ACTIVE = 1
								   AND c.IS_CATALOG_VISIBLE = 1)

			/* insertar todas las ordenes en transito de la linea */
			INSERT INTO STRANSITO (IDITEMTRANSITO, FECHAESTRECIBO, CANTIDADREC, FECHA, ACTIVIDAD, IDITEMXCOLOR, Accion)
                 SELECT a.PURCHASE_ORDER_DETAIL_ID, b.EXPECTED_RECEIPT_DATE, a.REQUESTED_QUANTITY, e.EXECUTION_DATE, ISNULL(e.ACTIVITY_DESCRIPTION,''), a.REFERENCE_ID, 'I'
                   FROM PURCHASE_ORDER_DETAILS a
                   JOIN PURCHASE_ORDERS b ON b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID
                   JOIN STATUS_DOCUMENT_TYPES g ON g.STATUS_DOCUMENT_TYPE_ID = b.STATUS_DOCUMENT_TYPE_ID 
										       AND g.STATUS_ORDER = 1 
				   LEFT JOIN PURCHASE_ORDER_ACTIVITIES e ON e.PURCHASE_ORDER_ID= b.PURCHASE_ORDER_ID
                  WHERE EXISTS (SELECT 1 FROM WAREHOUSES h 
					 			 WHERE h.WAREHOUSE_ID = a.WAREHOUSE_ID  
								   AND h.IS_CATALOG_VISIBLE = 1)
					AND EXISTS (SELECT 1 FROM ITEM_REFERENCES c 								
								  JOIN ITEMS d ON d.ITEM_ID = c.ITEM_ID
											  AND d.IS_ACTIVE = 1
											  AND d.IS_CATALOG_VISIBLE = 1
								  JOIN INSERTED f ON f.LINE_ID = d.LINE_ID
								 WHERE c.REFERENCE_ID = a.REFERENCE_ID
								   AND c.IS_ACTIVE = 1)			
		END
END
GO

CREATE OR ALTER TRIGGER [DBO].[TRGINSERTRITEMS]
   ON  ITEMS
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @oldActivo bit = (SELECT IS_ACTIVE FROM DELETED)
	DECLARE @newActivo bit = (SELECT IS_ACTIVE FROM INSERTED)
	DECLARE @oldVisible bit = (SELECT IS_CATALOG_VISIBLE FROM DELETED)
	DECLARE @newVisible bit = (SELECT IS_CATALOG_VISIBLE FROM INSERTED)
	
	/* Se esta realizando la eliminacion del registro o se esta inactivando el item */
	IF ((@oldActivo IS NOT NULL AND ISNULL(@newActivo,0) = 0) OR (@oldVisible = 1 and @newVisible = 0))
	BEGIN 
		INSERT INTO RITEMS(IDITEM, ACCION)
			 SELECT ITEM_ID, 'D' 
			   FROM DELETED		
			   
		IF (@newActivo = 0 or @newVisible = 0)
		BEGIN
			/* eliminar todas las referencias del item */
			INSERT INTO RITEMSXCOLOR (IDITEMXCOLOR, Accion)
                SELECT a.REFERENCE_ID, 'D'
                  FROM ITEM_REFERENCES a                
				  JOIN INSERTED b ON b.ITEM_ID = a.ITEM_ID
                 WHERE a.IS_ACTIVE = 1
                   
			/* eliminar todas las existencias en bodega del item */
			INSERT INTO REXISTENCIAS (IdItemxColor, IdBodega, Accion)
                SELECT a.REFERENCE_ID, a.WAREHOUSE_ID, 'D' 
                  FROM REFERENCES_WAREHOUSE a
				 WHERE EXISTS(SELECT 1 FROM ITEM_REFERENCES b 
								JOIN INSERTED e ON e.ITEM_ID = b.ITEM_ID
				               WHERE b.REFERENCE_ID = a.REFERENCE_ID
								 AND b.IS_ACTIVE = 1)
				   AND EXISTS(SELECT 1 FROM WAREHOUSES d 
				               WHERE d.WAREHOUSE_ID = a.WAREHOUSE_ID
							     AND d.IS_CATALOG_VISIBLE = 1) 

			/* eliminar todas las ordenes en transito del item */
			INSERT INTO STRANSITO (IDITEMTRANSITO, Accion)
                SELECT PURCHASE_ORDER_DETAIL_ID, 'D'
                  FROM PURCHASE_ORDER_DETAILS a
                  JOIN PURCHASE_ORDERS b ON b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID
                  JOIN STATUS_DOCUMENT_TYPES g ON g.STATUS_DOCUMENT_TYPE_ID = b.STATUS_DOCUMENT_TYPE_ID
											  AND g.STATUS_ORDER = 1 
                 WHERE EXISTS (SELECT 1 FROM WAREHOUSES h 
						  	 	WHERE h.WAREHOUSE_ID = a.WAREHOUSE_ID  
								  AND h.IS_CATALOG_VISIBLE = 1)
				   AND EXISTS (SELECT 1 FROM ITEM_REFERENCES c
								 JOIN INSERTED f ON f.ITEM_ID = c.ITEM_ID
								WHERE c.REFERENCE_ID = a.REFERENCE_ID				  
								  AND c.IS_ACTIVE = 1)
		END
	END 
	ELSE		
		/* el item esta activo o se esta activando */
		IF ((@oldActivo = 0 AND @newActivo = 1 AND @newVisible = 1) OR 
		    (@oldVisible = 0 AND @newVisible = 1 AND @newActivo = 1) OR
			(@oldActivo = 0 AND @newActivo = 1 AND @oldVisible = 0 AND @newVisible = 1))
		BEGIN
			/* siempre se actualiza el item cuando esta activo */
			INSERT INTO RITEMS (IDITEM, IDLINEA, REFINTERNA, NOMITEM, REFPROVEEDOR, NOMITEMPROV, COSTOFOB, IDMONEDA, OBSERVACIONES, INVENTARIOEXT, COSTOCIF, VOLUMEN, 
									PESO, IDUNIDADFOB, IDUNIDADCIF, PRODNAC, ACTIVO, CATALOGOVISIBLE, Accion)
				 SELECT ITEM_ID, a.LINE_ID, INTERNAL_REFERENCE, ITEM_NAME, PROVIDER_REFERENCE, PROVIDER_ITEM_NAME,
						FOB_COST, CURRENCY_ID, NOTES,
						CASE WHEN IS_EXTERNAL_INVENTORY = 0 THEN 'N' WHEN IS_EXTERNAL_INVENTORY = 1 THEN 'S' ELSE NULL END, /* se transforman ya que en la base de integracion los tipos de dato son diferentes */ 
						CIF_COST, VOLUME, WEIGHT, FOB_MEASURE_UNIT_ID, CIF_MEASURE_UNIT_ID, 
						CASE WHEN IS_DOMESTIC_PRODUCT = 0 THEN 'N' WHEN IS_DOMESTIC_PRODUCT = 1 THEN 'S' ELSE NULL END, /* se transforman ya que en la base de integracion los tipos de dato son diferentes */ 
						CASE WHEN a.IS_ACTIVE = 0 THEN 'N' WHEN a.IS_ACTIVE = 1 THEN 'S' ELSE NULL END, /* se transforman ya que en la base de integracion los tipos de dato son diferentes */ 
						CASE WHEN a.IS_CATALOG_VISIBLE = 0 THEN 'N' WHEN a.IS_CATALOG_VISIBLE = 1 THEN 'S' ELSE NULL END, /* se transforman ya que en la base de integracion los tipos de dato son diferentes */ 
						'I'
				   FROM INSERTED a 				 
			
			/* insertar todas las referencias del item */
			INSERT INTO RITEMSXCOLOR (IDITEMXCOLOR, IDITEM, REFITEMXCOLOR, REFINTITEMXCOLOR, NOMCOLOR, NOMITEMXCOLORPROV, OBSERVACIONES,
                                      COLOR, CANTPEDIDA, CANTIDAD, CANTRESERVADA, CANTPEDIDAPAN, CANTRESERVADAPAN, CANTIDADPAN, ACTIVO,
                                      AGOTADO, CANTPROCESO, Accion)
                 SELECT a.REFERENCE_ID, a.ITEM_ID, a.REFERENCE_CODE, a.PROVIDER_REFERENCE_CODE, a.REFERENCE_NAME, a.PROVIDER_REFERENCE_NAME, a.NOTES,
                        a.REFERENCE_NAME, a.ORDERED_QUANTITY, a.INVENTORY_QUANTITY, a.RESERVED_QUANTITY, 0, 0, 0, A.IS_ACTIVE,
                        a.IS_SOLD_OUT, a.WORK_IN_PROCESS_QUANTITY, 'I'
                   FROM ITEM_REFERENCES a                
                   JOIN INSERTED c ON c.ITEM_ID = a.ITEM_ID
                  WHERE a.IS_ACTIVE = 1                    

			/* insertar todas las existencias en bodega del item */
			INSERT INTO REXISTENCIAS (IdItemxColor, IdItem, IdBodega, Cantidad, Color, bodega, Accion)
                 SELECT a.REFERENCE_ID, b.ITEM_ID, a.WAREHOUSE_ID, a.QUANTITY, b.REFERENCE_NAME, d.WAREHOUSE_NAME, 'I' 
                   FROM REFERENCES_WAREHOUSE a
                   JOIN ITEM_REFERENCES b ON b.REFERENCE_ID = a.REFERENCE_ID
										 AND b.IS_ACTIVE = 1
                   JOIN INSERTED c ON c.ITEM_ID = b.ITEM_ID                  
				   JOIN WAREHOUSES d ON d.WAREHOUSE_ID = a.WAREHOUSE_ID
				                    AND d.IS_CATALOG_VISIBLE = 1 
				   
			/* insertar todas las ordenes en transito del item */
			INSERT INTO STRANSITO (IDITEMTRANSITO, FECHAESTRECIBO, CANTIDADREC, FECHA, ACTIVIDAD, IDITEMXCOLOR, Accion)
                 SELECT a.PURCHASE_ORDER_DETAIL_ID, b.EXPECTED_RECEIPT_DATE, a.REQUESTED_QUANTITY, e.EXECUTION_DATE, ISNULL(e.ACTIVITY_DESCRIPTION,''), a.REFERENCE_ID, 'I'
                   FROM PURCHASE_ORDER_DETAILS a
                   JOIN PURCHASE_ORDERS b ON b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID
				   LEFT JOIN PURCHASE_ORDER_ACTIVITIES e ON e.PURCHASE_ORDER_ID= b.PURCHASE_ORDER_ID
				   JOIN STATUS_DOCUMENT_TYPES g ON g.STATUS_DOCUMENT_TYPE_ID = b.STATUS_DOCUMENT_TYPE_ID
											   AND g.STATUS_ORDER = 1	
                  WHERE EXISTS (SELECT 1 FROM ITEM_REFERENCES c 
								  JOIN INSERTED d ON d.ITEM_ID = c.ITEM_ID
								 WHERE c.REFERENCE_ID = a.REFERENCE_ID
								   AND c.IS_ACTIVE = 1) 
                    AND EXISTS (SELECT 1 FROM WAREHOUSES h 
					 			 WHERE h.WAREHOUSE_ID = a.WAREHOUSE_ID  
								   AND h.IS_CATALOG_VISIBLE = 1)                                            
		END
END
GO

CREATE OR ALTER TRIGGER [DBO].[TRGINSERTRITEMSXCOLOR]
   ON  ITEM_REFERENCES
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @oldActivo bit = (SELECT IS_ACTIVE FROM DELETED)
	DECLARE @newActivo bit = (SELECT IS_ACTIVE FROM INSERTED)
		
	/* Se esta realizando la eliminacion del registro o se esta inactivando el item */
	IF (@oldActivo IS NOT NULL AND ISNULL(@newActivo,0) = 0)
	BEGIN 
		INSERT INTO RITEMSXCOLOR(IDITEMXCOLOR, ACCION)
			 SELECT REFERENCE_ID, 'D' 
			   FROM DELETED		
			   
		IF (@newActivo = 0)
		BEGIN      
			/* eliminar todas las existencias en bodega del item */
			INSERT INTO REXISTENCIAS (IDITEMXCOLOR, IDBODEGA, ACCION)
                SELECT a.REFERENCE_ID, a.WAREHOUSE_ID, 'D' 
                  FROM REFERENCES_WAREHOUSE a
                 WHERE EXISTS(SELECT 1 FROM WAREHOUSES d
				               WHERE d.WAREHOUSE_ID = a.WAREHOUSE_ID
								 AND d.IS_CATALOG_VISIBLE = 1)
				   AND EXISTS(SELECT 1 FROM DELETED b
								JOIN ITEMS c ON c.ITEM_ID = b.ITEM_ID
							                AND c.IS_ACTIVE = 1
							                AND c.IS_CATALOG_VISIBLE = 1
							   WHERE b.REFERENCE_ID = a.REFERENCE_ID)
                   
			/* eliminar todas las ordenes en transito del item */
			INSERT INTO STRANSITO (IDITEMTRANSITO, Accion)
                SELECT PURCHASE_ORDER_DETAIL_ID, 'D'
                  FROM PURCHASE_ORDER_DETAILS a
                  JOIN PURCHASE_ORDERS b ON b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID
                  JOIN STATUS_DOCUMENT_TYPES g ON g.STATUS_DOCUMENT_TYPE_ID = b.STATUS_DOCUMENT_TYPE_ID
											  AND g.STATUS_ORDER = 1 				  				  
                 WHERE EXISTS (SELECT 1 FROM WAREHOUSES h 
						  	 	WHERE h.WAREHOUSE_ID = a.WAREHOUSE_ID  
								  AND h.IS_CATALOG_VISIBLE = 1)
				   AND EXISTS (SELECT 1 FROM INSERTED f
								JOIN ITEMS c ON c.ITEM_ID = f.ITEM_ID
								            AND c.IS_ACTIVE = 1
											AND c.IS_CATALOG_VISIBLE = 1
								WHERE f.REFERENCE_ID = a.REFERENCE_ID)	
		END
	END 
	ELSE		
		/* el item esta activo o se esta activando */
		IF (@newActivo = 1)
		BEGIN
			/* siempre se actualiza la referncia cuando esta activo */
			INSERT INTO RITEMSXCOLOR (IDITEMXCOLOR, IDITEM, REFITEMXCOLOR, REFINTITEMXCOLOR, NOMCOLOR, NOMITEMXCOLORPROV, OBSERVACIONES,
                                          COLOR, CANTPEDIDA, CANTIDAD, CANTRESERVADA, CANTPEDIDAPAN, CANTRESERVADAPAN, CANTIDADPAN, ACTIVO,
                                          AGOTADO, CANTPROCESO, Accion)
                     SELECT a.REFERENCE_ID, a.ITEM_ID, a.REFERENCE_CODE, a.PROVIDER_REFERENCE_CODE, a.REFERENCE_NAME, a.PROVIDER_REFERENCE_NAME, a.NOTES,
                            a.REFERENCE_NAME, a.ORDERED_QUANTITY, a.INVENTORY_QUANTITY, a.RESERVED_QUANTITY, 0, 0, 0, A.IS_ACTIVE,
                            a.IS_SOLD_OUT, a.WORK_IN_PROCESS_QUANTITY, 'I'
                       FROM INSERTED a 
					   JOIN ITEMS b ON b.ITEM_ID = a.ITEM_ID
							       AND b.IS_ACTIVE = 1
							       AND b.IS_CATALOG_VISIBLE = 1
                       WHERE a.IS_ACTIVE = 1
                       
			/* solo si se esta activando se envia la creacion de todos los hijos del item */
			IF (@oldActivo <> @newActivo)
			BEGIN
				/* insertar todas las existencias en bodega del item */
				INSERT INTO REXISTENCIAS (IdItemxColor, IdItem, IdBodega, Cantidad, Color, bodega, Accion)
                     SELECT b.REFERENCE_ID, b.ITEM_ID, d.WAREHOUSE_ID, a.QUANTITY, b.REFERENCE_NAME, d.WAREHOUSE_NAME, 'I' 
                       FROM REFERENCES_WAREHOUSE a
                       JOIN WAREHOUSES d ON d.WAREHOUSE_ID = a.WAREHOUSE_ID	
									    AND d.IS_CATALOG_VISIBLE = 1 
					   JOIN INSERTED b ON b.REFERENCE_ID = a.REFERENCE_ID
                      WHERE EXISTS (SELECT 1 FROM ITEMS c 
									 WHERE c.ITEM_ID = b.ITEM_ID
									   AND c.IS_ACTIVE = 1
									   AND c.IS_CATALOG_VISIBLE = 1)

				/* insertar todas las ordenes en transito del item */
				INSERT INTO STRANSITO (IDITEMTRANSITO, FECHAESTRECIBO, CANTIDADREC, FECHA, ACTIVIDAD, IDITEMXCOLOR, Accion)
                     SELECT PURCHASE_ORDER_DETAIL_ID, b.EXPECTED_RECEIPT_DATE, a.REQUESTED_QUANTITY, e.EXECUTION_DATE, ISNULL(e.ACTIVITY_DESCRIPTION,''), a.REFERENCE_ID, 'I'
                       FROM PURCHASE_ORDER_DETAILS a
                       JOIN PURCHASE_ORDERS b ON b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID
                       JOIN STATUS_DOCUMENT_TYPES g ON g.STATUS_DOCUMENT_TYPE_ID = b.STATUS_DOCUMENT_TYPE_ID
												   AND g.STATUS_ORDER = 1
					   				   
					   LEFT JOIN PURCHASE_ORDER_ACTIVITIES e ON e.PURCHASE_ORDER_ID= b.PURCHASE_ORDER_ID					   
                      WHERE EXISTS (SELECT 1 FROM WAREHOUSES h 
					 				 WHERE h.WAREHOUSE_ID = a.WAREHOUSE_ID  
									   AND h.IS_CATALOG_VISIBLE = 1)   
					    AND EXISTS (SELECT 1 FROM INSERTED d 
									  JOIN ITEMS c ON c.ITEM_ID = d.ITEM_ID
												  AND c.IS_ACTIVE = 1
												  AND c.IS_CATALOG_VISIBLE = 1
									 WHERE d.REFERENCE_ID = a.REFERENCE_ID)
			END 
		END
END
GO

CREATE OR ALTER TRIGGER [DBO].[TRGINSERTREXISTENCIAS]
   ON  REFERENCES_WAREHOUSE
   AFTER INSERT, UPDATE, DELETE
AS 
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @warehouseId INT 

	IF EXISTS(SELECT 1 FROM DELETED) 
		SELECT @warehouseId = WAREHOUSE_ID FROM DELETED
	ELSE
		SELECT @warehouseId = WAREHOUSE_ID FROM INSERTED

	DECLARE @isWarehouseVisible bit = (SELECT IS_CATALOG_VISIBLE FROM WAREHOUSES WHERE WAREHOUSE_ID = @warehouseId)
	
	IF (@isWarehouseVisible = 1)
	BEGIN
		IF ((SELECT COUNT(1) FROM DELETED) > 0 AND (SELECT COUNT(1) FROM INSERTED) = 0) 		         
			INSERT INTO REXISTENCIAS (IdItemxColor, IdBodega, Accion)
				 SELECT a.REFERENCE_ID, a.WAREHOUSE_ID, 'D'
				   FROM DELETED a 
				  WHERE EXISTS (SELECT 1 FROM ITEM_REFERENCES b
								  JOIN ITEMS c ON c.ITEM_ID = b.ITEM_ID
											  AND c.IS_CATALOG_VISIBLE = 1	
											  AND c.IS_ACTIVE = 1
								 WHERE b.REFERENCE_ID = a.REFERENCE_ID
								   AND b.IS_ACTIVE = 1)					
		ELSE
			INSERT INTO REXISTENCIAS (IdItemxColor, IdItem, IdBodega, Cantidad, Color, bodega, Accion)
				 SELECT a.REFERENCE_ID, b.ITEM_ID, a.WAREHOUSE_ID, a.QUANTITY, b.REFERENCE_NAME, c.WAREHOUSE_NAME, 'I'				 
				   FROM INSERTED a
				   JOIN ITEM_REFERENCES b ON b.REFERENCE_ID = a.REFERENCE_ID
										 AND b.IS_ACTIVE = 1
				   JOIN WAREHOUSES c ON c.WAREHOUSE_ID = a.WAREHOUSE_ID
				  WHERE EXISTS (SELECT 1 FROM ITEMS d
								 WHERE d.ITEM_ID = b.ITEM_ID
								   AND d.IS_ACTIVE = 1
								   AND d.IS_CATALOG_VISIBLE = 1)          
	END
END
GO

CREATE OR ALTER TRIGGER [DBO].[TRGINSERTSTRANCITO_ACTIVITIES]
ON  PURCHASE_ORDER_ACTIVITIES
   AFTER INSERT, UPDATE, DELETE
AS
BEGIN 
	DECLARE @purchaseOrderId INT

	IF EXISTS(SELECT 1 FROM DELETED)
		SELECT @purchaseOrderId = PURCHASE_ORDER_ID FROM DELETED
	ELSE
		SELECT @purchaseOrderId = PURCHASE_ORDER_ID FROM INSERTED

	IF EXISTS (SELECT 1 
				 FROM STATUS_DOCUMENT_TYPES a
				 JOIN PURCHASE_ORDERS b ON b.STATUS_DOCUMENT_TYPE_ID = a.STATUS_DOCUMENT_TYPE_ID
				WHERE STATUS_ORDER = 1
				  AND b.PURCHASE_ORDER_ID = @purchaseOrderId)
	BEGIN
		DECLARE @fechaActividad DATETIME = NULL, @Actividad VARCHAR(200) = NULL

		IF EXISTS(SELECT 1 FROM INSERTED)
			SELECT @Actividad = a.ACTIVITY_DESCRIPTION, @fechaActividad = a.EXECUTION_DATE 
			  FROM INSERTED A
		
		INSERT INTO STRANSITO (IDITEMTRANSITO, FECHAESTRECIBO, CANTIDADREC, FECHA, ACTIVIDAD, IDITEMXCOLOR, Accion)
             SELECT PURCHASE_ORDER_DETAIL_ID, d.EXPECTED_RECEIPT_DATE, a.REQUESTED_QUANTITY, @fechaActividad, @Actividad, a.REFERENCE_ID,'I'
               FROM PURCHASE_ORDER_DETAILS a        
			   JOIN PURCHASE_ORDERS d on d.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID 
               JOIN ITEM_REFERENCES b ON b.REFERENCE_ID = a.REFERENCE_ID
									 AND b.IS_ACTIVE = 1
               JOIN ITEMS c ON c.ITEM_ID = b.ITEM_ID
						   AND c.IS_ACTIVE = 1
						   AND c.IS_CATALOG_VISIBLE = 1
			   JOIN WAREHOUSES e ON e.WAREHOUSE_ID = a.WAREHOUSE_ID
								AND e.IS_CATALOG_VISIBLE = 1 
              WHERE a.PURCHASE_ORDER_ID = @purchaseOrderId                 
	END 
END    
GO    

CREATE OR ALTER TRIGGER [DBO].[TRGINSERTSTRANCITO_DETAILS]
ON  PURCHASE_ORDER_DETAILS
   AFTER INSERT, UPDATE, DELETE
AS  
BEGIN    
	IF EXISTS(SELECT 1 FROM DELETED) AND NOT EXISTS(SELECT 1 FROM INSERTED)
		INSERT INTO STRANSITO (IDITEMTRANSITO, Accion)
		     SELECT a.PURCHASE_ORDER_DETAIL_ID, 'D'
		       FROM DELETED a
			   WHERE EXISTS (SELECT 1 FROM ITEM_REFERENCES b
				   		       JOIN ITEMS c ON c.ITEM_ID = b.ITEM_ID
								           AND c.IS_ACTIVE = 1
									       AND c.IS_CATALOG_VISIBLE = 1
						      WHERE b.REFERENCE_ID = a.REFERENCE_ID)
			     AND EXISTS (SELECT 1 FROM WAREHOUSES d
						      WHERE d.WAREHOUSE_ID = a.WAREHOUSE_ID
							    AND d.IS_CATALOG_VISIBLE = 1)
    ELSE
	BEGIN
		DECLARE @actualizationType CHAR(1) = 'D'

    	IF EXISTS (SELECT 1 FROM INSERTED a
					WHERE EXISTS (SELECT 1 FROM PURCHASE_ORDERS b
									JOIN STATUS_DOCUMENT_TYPES c ON c.STATUS_DOCUMENT_TYPE_ID = b.STATUS_DOCUMENT_TYPE_ID
																AND c.STATUS_ORDER = 1
								   WHERE b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID))
			SET @actualizationType = 'I'

		DECLARE @purchaseOrderActivityId INT = ISNULL((SELECT MAX(a.PURCHASE_ORDER_ACTIVITY_ID) 
			                                                FROM PURCHASE_ORDER_ACTIVITIES a
															JOIN INSERTED b on b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID),0)
		DECLARE @executionDate DATETIME = GETDATE()
		DECLARE @activityDescripcion VARCHAR(200) = ''
        
		IF (ISNULL(@purchaseOrderActivityId,0) > 0) 
			SELECT @executionDate = a.EXECUTION_DATE, @activityDescripcion = a.ACTIVITY_DESCRIPTION
			  FROM PURCHASE_ORDER_ACTIVITIES a
			 WHERE a.PURCHASE_ORDER_ACTIVITY_ID = @purchaseOrderActivityId
				  
		INSERT INTO STRANSITO (IDITEMTRANSITO, FECHAESTRECIBO, CANTIDADREC, FECHA, ACTIVIDAD, IDITEMXCOLOR, Accion)
			 SELECT a.PURCHASE_ORDER_DETAIL_ID, b.EXPECTED_RECEIPT_DATE, a.REQUESTED_QUANTITY, @executionDate, @activityDescripcion, a.REFERENCE_ID,@actualizationType
			   FROM INSERTED a
			   JOIN PURCHASE_ORDERS b ON b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID
			  WHERE EXISTS(SELECT 1 FROM WAREHOUSES c
						 	WHERE c.WAREHOUSE_ID = a.WAREHOUSE_ID
							  AND c.IS_CATALOG_VISIBLE = 1)
			    AND EXISTS(SELECT 1 FROM ITEM_REFERENCES d
							 JOIN ITEMS e ON e.ITEM_ID = d.ITEM_ID
									     AND e.IS_CATALOG_VISIBLE = 1
										 AND e.IS_ACTIVE = 1
							WHERE d.REFERENCE_ID = a.REFERENCE_ID
							  AND d.IS_ACTIVE = 1)
	END 
END
GO

CREATE OR ALTER TRIGGER [DBO].[TRGINSERTSTRANCITO_ORDERS]
ON  PURCHASE_ORDERS
   AFTER INSERT, UPDATE, DELETE
AS  
BEGIN    
	IF EXISTS(SELECT 1 FROM DELETED) AND NOT EXISTS(SELECT 1 FROM INSERTED)
	BEGIN 
      INSERT INTO STRANSITO (IDITEMTRANSITO, Accion)
           SELECT b.PURCHASE_ORDER_DETAIL_ID, 'D' 
             FROM INSERTED a
			 JOIN PURCHASE_ORDER_DETAILS b ON b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID
			WHERE EXISTS(SELECT 1 FROM WAREHOUSES c
						  WHERE c.WAREHOUSE_ID = b.WAREHOUSE_ID
							AND c.IS_CATALOG_VISIBLE = 1)
			  AND EXISTS(SELECT 1 FROM ITEM_REFERENCES d
						   JOIN ITEMS e ON e.ITEM_ID = d.ITEM_ID
									   AND e.IS_CATALOG_VISIBLE = 1
									   AND e.IS_ACTIVE = 1
						  WHERE d.REFERENCE_ID = b.REFERENCE_ID
							AND d.IS_ACTIVE = 1)
    END 
    ELSE
    BEGIN   
		DECLARE @actualizationType CHAR(1) = 'D'

    	IF EXISTS (SELECT 1 FROM INSERTED a
					 JOIN STATUS_DOCUMENT_TYPES b ON b.STATUS_DOCUMENT_TYPE_ID = a.STATUS_DOCUMENT_TYPE_ID
					  AND b.STATUS_ORDER = 1)
			SET @actualizationType = 'I'

		DECLARE @purchaseOrderActivityId INT = ISNULL((SELECT MAX(a.PURCHASE_ORDER_ACTIVITY_ID) 
			                                             FROM PURCHASE_ORDER_ACTIVITIES a
														 JOIN INSERTED b on b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID),0)
		DECLARE @executionDate DATETIME = GETDATE()
		DECLARE @activityDescripcion VARCHAR(200) = ''
        
		IF (ISNULL(@purchaseOrderActivityId,0) > 0) 
			SELECT @executionDate = a.EXECUTION_DATE, @activityDescripcion = a.ACTIVITY_DESCRIPTION
			  FROM PURCHASE_ORDER_ACTIVITIES a
			 WHERE a.PURCHASE_ORDER_ACTIVITY_ID = @purchaseOrderActivityId
				  
		INSERT INTO STRANSITO (IDITEMTRANSITO, FECHAESTRECIBO, CANTIDADREC, FECHA, ACTIVIDAD, IDITEMXCOLOR, Accion)
			 SELECT b.PURCHASE_ORDER_DETAIL_ID, a.EXPECTED_RECEIPT_DATE, b.REQUESTED_QUANTITY, @executionDate, @activityDescripcion, b.REFERENCE_ID,@actualizationType
			   FROM INSERTED a
			   JOIN PURCHASE_ORDER_DETAILS b ON b.PURCHASE_ORDER_ID = a.PURCHASE_ORDER_ID
			  WHERE EXISTS(SELECT 1 FROM WAREHOUSES c
						 	WHERE c.WAREHOUSE_ID = b.WAREHOUSE_ID
							  AND c.IS_CATALOG_VISIBLE = 1)
			    AND EXISTS(SELECT 1 FROM ITEM_REFERENCES d
							 JOIN ITEMS e ON e.ITEM_ID = d.ITEM_ID
									     AND e.IS_CATALOG_VISIBLE = 1
										 AND e.IS_ACTIVE = 1
							WHERE d.REFERENCE_ID = b.REFERENCE_ID
							  AND d.IS_ACTIVE = 1)
    END            

END 